package itlogs

import (
	"io"
	"log"
	"os"
)

// Logger is interface for standard logging methods.
type Logger interface {
	Log(LogLevel, string)
	Trace(string)
	Debug(string)
	Info(string)
	Warn(string)
	Error(string)
	Fatal(string)
}

var defaultLogger Logger = NewDefaultConsoleLogger(Debug)

// SetDefaultLogger is method for setting default logger.
func SetDefaultLogger(logger Logger) {
	defaultLogger = logger
}

// GetDefaultLogger returns default logger. Use SetDefaultLogger fo set default logger.
func GetDefaultLogger() Logger {
	return defaultLogger
}

// LogLevel used for logging levels to be different.
type LogLevel int

// String returns a string representation for LogLevel.
func (l LogLevel) String() string {
	return []string{
		"TRACE", "DEBUG", "INFO", "WARNING", "ERROR", "FATAL",
	}[l]
}

// Use these constants for set logging levels.
const (
	Trace LogLevel = iota
	Debug
	Info
	Warning
	Error
	Fatal
)

// LogMsgFlag is wrapper for default log flags.
type LogMsgFlag int

// Strings returns a string representation for LogMsgFlag.
func (f LogMsgFlag) String() string {
	return map[LogMsgFlag]string{
		Ldate:         "Ldate",
		Ltime:         "Ltime",
		Lmicroseconds: "Lmicroseconds",
		Llongfile:     "Llongfile",
		Lshortfile:    "Lshortfile",
		LUTC:          "LUTC",
		Lmsgprefix:    "Lmsgprefix",
		LstdFlags:     "LstdFlags",
	}[f]
}

// Use these constants for define which text to prefix to each log entry generated by the Logger.
// See appropriate flags in default log package.
const (
	Ldate         LogMsgFlag = log.Ldate
	Ltime         LogMsgFlag = log.Ltime
	Lmicroseconds LogMsgFlag = log.Lmicroseconds
	Llongfile     LogMsgFlag = log.Llongfile
	Lshortfile    LogMsgFlag = log.Lshortfile
	LUTC          LogMsgFlag = log.LUTC
	Lmsgprefix    LogMsgFlag = log.Lmsgprefix
	LstdFlags     LogMsgFlag = log.LstdFlags
)

// DefaultLogger is default implementation for Logger interface.
type DefaultLogger struct {
	// Default logging level.
	Level LogLevel
	trace *log.Logger
	debug *log.Logger
	info  *log.Logger
	warn  *log.Logger
	err   *log.Logger
	fatal *log.Logger
}

// NewLogger creates new logger and returns it as result.
func NewLogger(out io.Writer, flags []LogMsgFlag, level LogLevel) *DefaultLogger {
	flag := 0

	if len(flags) == 0 {
		flag = int(Ldate | Ltime | Lmsgprefix)
	} else {
		for _, f := range flags {
			flag = flag | int(f)
		}
	}

	logger := &DefaultLogger{
		Level: level,
		trace: log.New(out, Trace.String()+" ", flag),
		debug: log.New(out, Debug.String()+" ", flag),
		info:  log.New(out, Info.String()+" ", flag),
		warn:  log.New(out, Warning.String()+" ", flag),
		err:   log.New(out, Error.String()+" ", flag),
		fatal: log.New(out, Fatal.String()+" ", flag),
	}

	return logger
}

// NewConsoleLogger creates new logger with stdout as out and returns it as result.
func NewConsoleLogger(flags []LogMsgFlag, level LogLevel) *DefaultLogger {
	return NewLogger(os.Stdout, flags, level)
}

// NewDefaultConsoleLogger creates new DefaultConsoleLogger and returns it as result.
func NewDefaultConsoleLogger(level LogLevel) *DefaultLogger {
	return NewConsoleLogger([]LogMsgFlag{}, level)
}

// NewDefaultLogger creates new DefaultLogger and returns it as result.
func NewDefaultLogger(out io.Writer, level LogLevel) *DefaultLogger {
	return NewLogger(out, []LogMsgFlag{}, level)
}

// Log writes msg if level is more or equals than default level, otherwise does nothing.
func (l DefaultLogger) Log(level LogLevel, msg string) {
	if level < l.Level {
		return
	}

	withFile := func(l *log.Logger) bool {
		return l.Flags()&(int(Llongfile)|int(Lshortfile)) != 0
	}

	var logger *log.Logger

	switch level {
	case Trace:
		logger = l.trace
	case Debug:
		logger = l.debug
	case Info:
		logger = l.info
	case Warning:
		logger = l.warn
	case Error:
		logger = l.err
	case Fatal:
		logger = l.fatal
	}

	if withFile(logger) {
		logger.Output(2, msg)
	} else {
		logger.Print(msg)
	}
}

// Trace calls Log with level Trace.
func (l DefaultLogger) Trace(msg string) {
	l.Log(Trace, msg)
}

// Debug calls Log with level Debug.
func (l DefaultLogger) Debug(msg string) {
	l.Log(Debug, msg)
}

// Info calls Log with level Info.
func (l DefaultLogger) Info(msg string) {
	l.Log(Info, msg)
}

// Warn calls Log with level Warning.
func (l DefaultLogger) Warn(msg string) {
	l.Log(Warning, msg)
}

// Error calls Log with level Error.
func (l DefaultLogger) Error(msg string) {
	l.Log(Error, msg)
}

// Fatal calls Log with level Fatal.
func (l DefaultLogger) Fatal(msg string) {
	l.Log(Fatal, msg)
}
